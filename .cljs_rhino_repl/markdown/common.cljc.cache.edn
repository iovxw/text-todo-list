;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name markdown.common, :imports nil, :requires {string clojure.string, clojure.string clojure.string}, :uses nil, :defs {italics {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 120, :column 7, :end-line 120, :end-column 14, :arglists (quote ([text state]))}, :name markdown.common/italics, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 14, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, separator {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([escape? text open close separator state]))}, :name markdown.common/separator, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 16, :method-params ([escape? text open close separator state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 6, :fn-var true, :arglists (quote ([escape? text open close separator state]))}, make-heading {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 138, :column 7, :end-line 138, :end-column 19, :arglists (quote ([text heading-anchors]))}, :name markdown.common/make-heading, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 19, :method-params ([text heading-anchors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text heading-anchors]))}, *substring* {:name markdown.common/*substring*, :file ".cljs_rhino_repl/markdown/common.cljc", :line 4, :column 1, :end-line 4, :end-column 38, :dynamic true, :declared true, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 4, :column 27, :end-line 4, :end-column 38, :dynamic true, :declared true}}, dashes {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 145, :column 7, :end-line 145, :end-column 13, :arglists (quote ([text state]))}, :name markdown.common/dashes, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 13, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, thaw-strings {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([text state])), :doc "Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"}, :name markdown.common/thaw-strings, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 19, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state])), :doc "Terminally encoded strings are ones that we've determined should no longer be processed or evaluated"}, escape-delimiter {:name markdown.common/escape-delimiter, :file ".cljs_rhino_repl/markdown/common.cljc", :line 6, :column 1, :end-line 6, :end-column 22, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 6, :column 6, :end-line 6, :end-column 22}}, heading-text {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 129, :column 7, :end-line 129, :end-column 19, :arglists (quote ([text]))}, :name markdown.common/heading-text, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 19, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, bold {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 114, :column 7, :end-line 114, :end-column 11, :arglists (quote ([text state]))}, :name markdown.common/bold, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 11, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, freeze-string {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([& args])), :doc "Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name markdown.common/freeze-string, :variadic true, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Freezes an output string.  Converts to a placeholder token and puts that into the output.\n  Returns the [text, state] pair.  Adds it into the state, the 'frozen-strings' hashmap\n  So that it can be unfrozen later."}, thaw-string {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([text state])), :doc "Recursively replaces the frozen strings in the output with the original text."}, :name markdown.common/thaw-string, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state])), :doc "Recursively replaces the frozen strings in the output with the original text."}, escape-code {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 40, :column 7, :end-line 40, :end-column 18, :arglists (quote ([s]))}, :name markdown.common/escape-code, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, strong {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 111, :column 7, :end-line 111, :end-column 13, :arglists (quote ([text state]))}, :name markdown.common/strong, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 13, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, em {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 117, :column 7, :end-line 117, :end-column 9, :arglists (quote ([text state]))}, :name markdown.common/em, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 9, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, heading-level {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 134, :column 7, :end-line 134, :end-column 20, :arglists (quote ([text]))}, :name markdown.common/heading-level, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 20, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, escaped-chars {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 56, :column 7, :end-line 56, :end-column 20, :arglists (quote ([text state]))}, :name markdown.common/escaped-chars, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 20, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, inline-code {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 126, :column 7, :end-line 126, :end-column 18, :arglists (quote ([text state]))}, :name markdown.common/inline-code, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 18, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}, strikethrough {:protocol-inline nil, :meta {:file "/home/iovxw/workspace/text-todo-list/.cljs_rhino_repl/markdown/common.cljc", :line 123, :column 7, :end-line 123, :end-column 20, :arglists (quote ([text state]))}, :name markdown.common/strikethrough, :variadic false, :file ".cljs_rhino_repl/markdown/common.cljc", :end-column 20, :method-params ([text state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:codeblock :default :frozen-strings :found-token :code}, :order [:frozen-strings :code :codeblock :found-token :default]}, :doc nil}